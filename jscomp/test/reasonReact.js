// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let React = require("react");

function createDomElement(s, props, children) {
  let vararg = [
    s,
    props
  ].concat(children);
  return React.createElement.apply(null, vararg);
}

function anyToUnit(param) {
  
}

function anyToTrue(param) {
  return true;
}

function willReceivePropsDefault(param) {
  return param.state;
}

function renderDefault(_self) {
  return "RenderNotImplemented";
}

function initialStateDefault() {
  
}

function reducerDefault(_action, _state) {
  return "NoUpdate";
}

function basicComponent(debugName) {
  return {
    debugName: debugName,
    reactClassInternal: debugName,
    handedOffState: {
      contents: undefined
    },
    willReceiveProps: willReceivePropsDefault,
    didMount: anyToUnit,
    didUpdate: anyToUnit,
    willUnmount: anyToUnit,
    willUpdate: anyToUnit,
    shouldUpdate: anyToTrue,
    render: renderDefault,
    initialState: initialStateDefault,
    retainedProps: undefined,
    reducer: reducerDefault,
    jsElementWrapped: undefined
  };
}

function statelessComponent(debugName) {
  return basicComponent(debugName);
}

function statelessComponentWithRetainedProps(debugName) {
  return basicComponent(debugName);
}

function reducerComponent(debugName) {
  return basicComponent(debugName);
}

function reducerComponentWithRetainedProps(debugName) {
  return basicComponent(debugName);
}

function element(keyOpt, refOpt, component) {
  let key = keyOpt !== undefined ? keyOpt : undefined;
  let ref = refOpt !== undefined ? refOpt : undefined;
  let element$1 = {
    TAG: "Element",
    _0: component
  };
  let jsElementWrapped = component.jsElementWrapped;
  if (jsElementWrapped !== undefined) {
    return jsElementWrapped(key, ref);
  } else {
    return React.createElement(component.reactClassInternal, {
      key: key,
      ref: ref,
      reasonProps: element$1
    });
  }
}

let Router;

exports.statelessComponent = statelessComponent;
exports.statelessComponentWithRetainedProps = statelessComponentWithRetainedProps;
exports.reducerComponent = reducerComponent;
exports.reducerComponentWithRetainedProps = reducerComponentWithRetainedProps;
exports.element = element;
exports.createDomElement = createDomElement;
exports.Router = Router;
/* react Not a pure module */
